{{>adminSidebar}}
{{>adminNavbar}}

<!-- Returns View Start -->
<div class="container-fluid pt-4 px-4">
  <div class="bg-light text-center rounded p-4">
    <div class="bg-light text-center rounded pb-4">
      <div class="row align-items-center justify-content-between">
        <div class="col-md-6">
          <input class="form-control rounded-3 bg-transparent" type="search" value="" id="searchInput"placeholder="Search" />
        </div>
        <div class="col-auto">
          <a href="/admin/returns" class="btn btn-primary m-2">Clear Filters</a>
        </div>
      </div>
    </div>
    <div class="table-responsive">
      <table class="table text-start align-middle table-bordered table-hover mb-0" id="returnsTable">
        <thead>
          <tr class="text-dark">
            <th scope="col"><input class="form-check-input" type="checkbox"></th>
            <th scope="col">Order id</th>
            <th scope="col">Customer</th>
            <th scope="col">Products</th>
            <th scope="col">Amount</th>
            <th scope="col">Date</th>
            <th scope="col">Payment</th>
            <th scope="col">refund</th>
            <th scope="col">Status</th>
            <th scope="col">Action</th>
          </tr>
        </thead>
        <tbody>
          {{#each orders}}
          {{#each this.items}}
          {{#if this.return}} <!--giving Only display items that have a return request -->
          <tr>
            <td><input class="form-check-input" type="checkbox"></td>
            <td>{{../orderId}}</td>
            <td>{{../user.name}} </td>
            <td>
              {{this.product.name}} , Qty: {{this.quantity}}
            </td>
            <td>{{this.refundAmount}}</td>
            <td>{{date ../datePlaced "MMMM Do, YYYY"}}</td>
            <td>{{../paymentType}}</td>
            <td>{{#if this.refund}} <span class="badge bg-success text-white">Complete</span> {{else}} <span class="badge bg-warning text-dark">Pending</span> {{/if}} </td>
            <td>{{this.returnStatus}}</td>
            <td>
              <select class="form-select status-select" data-return-id="{{this._id}}"style="background-color: #009cfe; color: white; appearance: none; padding-right: 30px; width: auto; text-align-last: center;">
                <option value="Requested" {{#if (eq this.returnStatus 'Requested' )}}selected{{/if}} {{#if (or (eq this.returnStatus 'Processing') (eq this.returnStatus 'Approved') (eq this.returnStatus 'Rejected'))}}disabled{{/if}}>Requested</option>
                <option value="Processing" {{#if (eq this.returnStatus 'Processing' )}}selected{{/if}} {{#if (or (eq this.returnStatus 'Approved') (eq this.returnStatus 'Rejected'))}}disabled{{/if}}>Processing</option>
                <option value="Approved" {{#if (eq this.returnStatus 'Approved' )}}selected{{/if}} {{#if (eq this.returnStatus 'Rejected')}}disabled{{/if}}>Approved</option>
                <option value="Rejected" {{#if (eq this.returnStatus 'Rejected' )}}selected{{/if}}  {{#if (eq this.returnStatus 'Approved') }}disabled{{/if}}>Rejected</option>
              </select>
            </td>
          </tr>
          {{/if}}
          {{/each}}
          {{/each}}
        </tbody>
      </table>
    </div>

  </div>
</div>
<!-- Returns View End -->

{{>adminFooter}}

<!-- Back to Top -->
<a href="#" class="btn btn-lg btn-primary btn-lg-square back-to-top"><i class="bi bi-arrow-up"></i></a>


{{!-- <script>
  document.addEventListener('DOMContentLoaded', function() {
    const statusSelects = document.querySelectorAll('.status-select');

    statusSelects.forEach(select => {
      select.addEventListener('change', async (event) => {
        const returnId = event.target.getAttribute('data-return-id');
        const newStatus = event.target.value;

        try {
          const response = await fetch(`/admin/update-return-status`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ returnId, newStatus })
          });

          const result = await response.json();

          if (result.success) {
            // Use SweetAlert to show success message
            Swal.fire({
              icon: 'success',
              title: 'Status Updated',
              text: 'Return status updated successfully!',
            });

            // Dynamically update the status text in the table row
            const statusColumn = event.target.closest('tr').querySelector('td:nth-child(9)');
            statusColumn.textContent = newStatus;

            // Disable previous statuses in the select dropdown
            disablePreviousStatuses(event.target, newStatus);
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to update return status.',
            });
          }
        } catch (error) {
          console.error('Error updating return status:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating return status.',
          });
        }
      });
    });

    // Function to disable previous statuses after selecting a new one
    function disablePreviousStatuses(select, newStatus) {
      const options = select.querySelectorAll('option');

      options.forEach(option => {
        if (option.value === 'Requested' && newStatus !== 'Requested') {
          option.disabled = true;
        }
        if (option.value === 'Processing' && newStatus !== 'Processing') {
          option.disabled = true;
        }
        if (option.value === 'Approved' && newStatus !== 'Approved') {
          option.disabled = true;
        }
        // No need to disable 'Rejected' since it's the last option.
      });
    }
  });
</script> --}}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const statusSelects = document.querySelectorAll('.status-select');

    statusSelects.forEach(select => {
      select.addEventListener('change', async (event) => {
        const returnId = event.target.getAttribute('data-return-id');
        const newStatus = event.target.value;

        try {
          const response = await fetch(`/admin/update-return-status`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ returnId, newStatus })
          });

          const result = await response.json();

          if (result.success) {
            Swal.fire('Success!', 'Return status updated successfully.', 'success').then(() => {
              location.reload();
            });
          } else {
            Swal.fire('Error', 'Failed to update return status.', 'error');
          }
        } catch (error) {
          console.error('Error updating return status:', error);
          Swal.fire('Error', 'There was an error updating the return status.', 'error');
        }
      });
    });
  });
</script>
