                <!-- Coupon Accordion -->
                {{!-- <div class="accordion" id="coupon-accordion">
                    <div class="card col-sm-9 col-md-9 col-lg-9 ">
                        <div class="card-header" id="headingCoupon">
                            <h2 class="card-title">
                                <a role="button" data-toggle="collapse" href="#collapseCoupon" aria-expanded="true" aria-controls="collapseCoupon">
                                   Click here to select your coupon
                                </a>
                            </h2>
                        </div><!-- End .card-header -->

                        <div id="collapseCoupon" class="collapse " aria-labelledby="headingCoupon" data-parent="#coupon-accordion">
                            <div class="card-body">
                                <!-- Radio buttons for coupon selection -->
                                <div class="form-group">
                                    {{#each coupon}}
                                    <div class="custom-control custom-radio">
                                        <input type="radio" id="couponSAVE10" name="couponOption" class="custom-control-input">
                                        <label class="custom-control-label" for="couponSAVE10">
                                            <strong>{{this.code}} </strong><br>
                                            {{this.description}}
                                        </label>
                                    </div>
                                    {{/each}}
                                </div><!-- End .form-group -->
                            </div><!-- End .card-body -->
                        </div><!-- End .collapse -->
                    </div><!-- End .card -->
                </div> --}}

                

                {{!-- below from cod portion from checkout.hbs --}}
                                            {{!-- <div class="accordion-summary" id="accordion-payment">
                                <div class="card">
                                    <div class="card-header" id="heading-3">
                                        <h2 class="card-title">
                                            <a class="collapsed" role="button" data-toggle="collapse" href="#collapse-3" aria-expanded="false" aria-controls="collapse-3">
                                                Cash on delivery
                                            </a>
                                        </h2>
                                    </div><!-- End .card-header -->
                                    <div id="collapse-3" class="collapse" aria-labelledby="heading-3" data-parent="#accordion-payment">
                                        <div class="card-body">
                                            Make your payment directly into our bank account. Please use your Order ID as the payment reference. Your order will not be shipped until the funds have cleared in our account.
                                        </div><!-- End .card-body -->
                                    </div><!-- End .collapse -->
                                </div><!-- End .card -->
                            </div><!-- End .accordion --> --}}



               {{!-- below        from user controller stripe related      --}}
{{!-- <script>

// {{!-- below for stripe --}}

// async function createStripePaymentIntent(req, res) {
//   try {
//       const { addressId, paymentType, totalCheckOutValue } = req.body;
//       console.log(addressId);
//       console.log(req.body);
      
      
//       const userId = req.session.user._id;

//       // Get cart details
//       const cart = await cartHelper.getCart(userId)
      
//       if (!cart) {
//           return res.status(400).json({ error: 'Invalid cart.' });
//       }

//       // Get address details
//       const address = await Address.findById(addressId);
//       if (!address) {
//           return res.status(400).json({ error: 'Invalid address.' });
//       }

//       const totalAmount = cart.items.reduce((total, item) => total + item.total, 0);
//       const discount = totalCheckOutValue ? totalAmount - totalCheckOutValue : 0;
//       const finalAmount = totalCheckOutValue || totalAmount;

//       let paymentIntent;

//       // Only create a payment intent if Stripe is selected
//       if (paymentType === 'Stripe Payment') {
//           paymentIntent = await stripe.paymentIntents.create({
//               amount: Math.round(finalAmount * 100), // Amount in cents
//               currency: 'inr',
//               metadata: {
//                   cartId: cart._id.toString(),
//                   userId: userId.toString(),
//               },
//           });
//       }

//       // Create order
//       const order = new Order({
//           user: userId,
//           address: address._id,
//           items: cart.items.map(item => ({
//               product: item.productId._id,
//               quantity: item.quantity,
//               price: item.price,
//           })),
//           totalAmount,
//           discount,
//           finalAmount,
//           paymentType,
//           stripeIntentId: paymentIntent ? paymentIntent.id : null,
//       });

//       await order.save();

//       // Clear the user's cart after order creation
//       await Cart.deleteOne({ userId });

//       // Respond with the client secret for Stripe payment or success message
//       if (paymentIntent) {
//           return res.status(200).json({ clientSecret: paymentIntent.client_secret, orderId: order._id });
//       } else {
//           return res.status(200).json({ message: 'Order placed successfully with Cash on Delivery', orderId: order._id });
//       }
//   } catch (error) {
//       console.error('Error creating Stripe payment intent:', error);
//       res.status(500).json({ error: 'An error occurred while processing your payment.' });
//   }
// }

// // Confirm Order Payment
// async function confirmOrderPayment(req, res) {
//   try {
//       const { orderId, paymentStatus } = req.body;

//       const order = await Order.findById(orderId);
//       if (!order) {
//           return res.status(400).json({ error: 'Order not found.' });
//       }

//       // Update order status based on payment status
//       if (paymentStatus === 'succeeded') {
//           order.orderStatus = 'Processing';
//       } else {
//           order.orderStatus = 'Cancelled';
//       }

//       await order.save();

//       // Deduct stock for the ordered items if not done yet
//       if (order.stockUpdated === false && paymentStatus === 'succeeded') {
//           for (const item of order.items) {
//               const product = await Product.findById(item.product);
//               product.stock -= item.quantity;
//               await product.save();
//           }
//           order.stockUpdated = true;
//           await order.save();
//       }

//       res.status(200).json({ message: 'Order payment status updated successfully.' });
//   } catch (error) {
//       console.error('Error confirming order payment:', error);
//       res.status(500).json({ error: 'An error occurred while confirming your order.' });
//   }
// }


</script>                --}}
               {{!-- above        from user controller stripe related      --}}


{{!-- below from checkout ajax  --}}
{{!-- <script>
    const stripe = Stripe('pk_test_51Ptt5WCsHv5xvAVbuFRE7PPgkMe9Qh3iUcmALvTsfNyIirpmoAmzmTZ8xdCUo4iGGt2xDx9pHssGSazWIDBqKnrf00HR3DExzR'); // Replace with your actual public key
    const elements = stripe.elements();
    const cardElement = elements.create('card');
    const placeOrderBtn = document.getElementById('place-order-btn');
    const cardErrors = document.getElementById('card-errors');
    
    const cardElementContainer = document.getElementById('card-element');

    placeOrderBtn.addEventListener('click', async function(event) {
        event.preventDefault();  // Prevent form submission

        const selectedAddressId = document.getElementById('existing-address').value;
        const totalCheckOutValue = document.getElementById('orderTotal').textContent;
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');
        
        if (!paymentMethod) {
            alert('Please select a payment method.');
            return;
        }

        const paymentType = paymentMethod.value;

        if (selectedAddressId === 'Select an Address') {
            alert('Please select an address before placing the order.');
            return;
        }

        const requestBody = { 
            addressId: selectedAddressId, 
            paymentType: paymentType,
        };

        if (totalCheckOutValue) {
            requestBody.totalCheckOutValue = totalCheckOutValue;
        }

        // Show the card input only if Stripe Payment is selected
        if (paymentType === 'Stripe Payment') {
            cardElement.mount('#card-element');
            cardElementContainer.style.display = 'block';
        } else {
            cardElementContainer.style.display = 'none';
        }

        // Trigger backend to create Stripe payment intent
        const response = await fetch('/create-payment-intent', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });

        const data = await response.json();
        window.open(data.url,"_blank")
        
        if (!response.ok) {
            alert(data.message || 'Failed to create payment intent.');
            return;
        }

        if (paymentType === 'Stripe Payment') {
            const { clientSecret } = data;

            // Confirm the payment using Stripe.js and card details
            const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: cardElement,
                    billing_details: {
                        // Add billing details if necessary
                    },
                }
            });

            if (error) {
                cardErrors.textContent = `Payment failed: ${error.message}`;
            } else if (paymentIntent.status === 'succeeded') {
                alert('Payment successful!');

                // Now proceed with form submission or cart clearance
                await fetch('/complete-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        paymentIntentId: paymentIntent.id,
                        addressId: selectedAddressId,
                        paymentType: paymentType
                    })
                });

                window.location.href = '/order-success';
            } else {
                cardErrors.textContent = 'Payment was not successful. Please try again.';
            }
        } else {
            alert('Order placed successfully with Cash on Delivery!');
            
            // Handle order completion for Cash on Delivery
            await fetch('/complete-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ 
                    addressId: selectedAddressId,
                    paymentType: paymentType
                })
            });

            window.location.href = '/order-success';
        }
    });
</script> --}}
{{!-- above for checkuot ajax --}}


{{!-- below for stripe div not needed --}}
{{!-- <div id="card-element" style="display: none;">
    <!-- Stripe's card element will be inserted here -->
</div>
<div id="card-errors" role="alert"></div> --}}
{{!-- above for stripe --}}